=head1 NAME

PSGI::FAQ - Часто задаваемые вопросы и ответы

=head1 ВОПРОСЫ

=head2 Общие вопросы

=head3 Как произносится PSGI?

Да просто Пэ-эС-Гэ-АЙ.

=head3 Так что же это?

PSGI это интерфейс между веб серверами и Perl веб приложениями аналогично тому,
чем является CGI для серверов и CGI скриптов.

=head3 Зачем это нам нужно?

Модуль CGI поставляется вместе с Perl, что в некотором роде обеспечивает
абстракцию над CGI, mod_perl и FastCGI. Однако большинство разработчиков веб
фреймворков (например, Catalyst и Jifty) обычно не используют этот модуль для
обеспечения производительности и доступа к низкоуровневым API. Поэтому они в
итоге приходят к написанию адаптеров для всех окружений, некоторые из которых
могут быть оттестированы лучше других.

PSGI позволяет разработчикам веб фреймворков реализовывать только адаптер для
PSGI. Конечные же пользователи могут выбирать любые поддерживающие PSGI
интерфейс серверные приложения.

=head3 PSGI похож на CGI. Каким образом PSGI интерфейс отличается от CGI?

PSGI интерфейс намеренно спроектирован очень похожим на CGI, чтобы поддержка
PSGI в дополнение к CGI была как можно проще.

=over 4

=item *

В CGI серверы это фактически веб серверы написанные на любом языке, в
основном на C, и скрипт это скрипт, который также может быть написан на любом
языке таком как C, Perl, Shell скриптах, Ruby или Python.

В PSGI серверы тоже веб серверы, но это уже perl процессы, которые обычно
встраиваются в веб сервер (как mod_perl) или же perl демоны, которые вызываются
веб сервером (как FastCGI), или веб серверы полностью реализованные на Perl. И
PSGI приложение это ссылка на Perl подпрограмму.

=item *

В CGI мы используем STDIN, STDERR и переменные окружения для чтения параметров,
тела HTTP запроса и сообщений об ошибках.

В PSGI мы используем ссылки на хеш C<$env> и потоки I<psgi.input> и
I<psgi.errors> для передачи данных между серверами и приложениями.

=item *

В CGI приложения должны отдавать HTTP заголовки и тело в STDOUT, чтобы передать
это обратно веб серверу.

В PSGI приложения должны вернуть код статуса HTTP, заголовки и тело (как ссылку
на массив или filehandle объект) серверу в качестве ссылки на массив.

=back

=head3 Мой фреймворк уже поддерживает CGI, FCGI и mod_perl. Зачем мне поддерживаеть PSGI?

Есть много разных преимуществ в поддержке PSGI для веб фреймворка.

=over 4

=item *

Можно не писать код для поддержки разных окружений веб серверов.

В Plack много хорошо протестированных адаптеров для серверных окружений как,
например, CGI, FastCGI и mod_perl. Так же много новых веб серверов написанных
специально для поддержки стандартного PSGI интерфейса, как, например,
L<Starman>, L<Starlet> и L<Twiggy>. Как только фреймворк поддерживает PSGI,
больше ничего не нужно, чтобы их использовать. И это без каких бы то ни было
усилий.

Также, даже если фреймворк уже поддерживает большинство серверых окружений, как
было сказано выше, можно отказаться от этого кода в пользу PSGI. Так поступили
L<Jifly> и L<Catalyst>, когда реализовали поддержку PSGI. Меньше кода значит
меньше багов :)

=item *

Фреймворк теперь может использовать все промежуточные компоненты Plack 

Если поискать L<Plack::Middleware> на CPAN можно найти сотни PSGI совместимых
промежуточных компонентов. Это часто написанные с нуля, но также и заимствующие
код из существующих плагинов для фреймворков таких как L<Catalyst>, модули.
Поддерживая PSGI интерфейс, фреймворк может использовать эти полезные
компоненты, будь то сессии, кеширование, перепизаписывание URL или отладочная
панель, и это только несколько из них.

=item *

Можно тестировать приложения используя единообразный интерфейс L<Plack::Test>.

Любое PSGI приложение может быть протестировано с помощью L<Plack::Test>, либо
через mock объекты, либо через запущенный сервер. Есть также
L<Test::WWW::Mechanize::PSGI> для тестирования в стиле Mechanize.

=back

=head3 Я пишу веб приложение. В чем для меня преимущество использования PSGI?

Если используется фреймворк поддерживающий PSGI, приложение может быть запущено
на любой существующей или будущей PSGI реализации. Необходимо предоставить
C<.psgi> файл, который возвращает PSGI приложение, и конечные пользователи
приложения смогут сконфигурировать и запустить его различными способами.

=head3 Но я пишу приложение на CGI и оно хорошо работает. Должен ли я переключаться на PSGI?

Если пишется веб приложение с использованием CGI.pm не используя веб фреймворки,
это ограничивает приложение для запуска только в CGI окружении, вместе с
mod_perl и FastCGI с некоторыми изменениями. Если у приложения один программист
и он же пользователь, то этого может быть вполне достаточно.

Однажды может появиться необходимость использования приложения на виртуальном
хостинге, или запуска сервера в автономном режиме, а не как CGI скрипт, или
распространение приложения как open source. Лимитирование приложения CGI окружением,
при этом используя CGI.pm, может аукнуться.

Можно начать использовать один из PSGI совместимых фреймворков (либо
полнофункциональных, либо микро), или использовать L<Plack::Request> если вы
против фреймворков, чтобы сделать приложение осведомленным о PSGI на будущеe.

Даже если вместо PSGI используется CGI для написания приложения, всегда можно
переключиться на PSGI используя L<CGI::PSGI> оббертку.

=head3 Что нужно сделать, чтобы поддерживать PSGI?

Разработчикам веб серверов необходимо написать PSGI реализацию, называемую
PSGI приложением. Также стоит присоединиться к разработке Plack - PSGI
инструментария и утилит - чтобы добавить адаптер сервера.

Разработчикам веб фреймворков необходимо написать адаптер для PSGI. Это
освобождает от необходимости в поддержке разных серверных окружений.

Разработчикам веб приложений (или пользователям веб вреймворков) необходимо
выбрать фреймворк поддерживающий PSGI или попросить автора поддерживать
этот интерфейс :). Если приложение большого размера и не использует никаких
фреймворков (как, например, WebGUI или Movable Type) стоит следовать совету
разработчикам фреймворков. В этом случае написание адаптера будет иметь больший
смысл.

=head3 Быстрее ли PSGI чем (мой фреймворк)?

Опять же, PSGI это не реализация, но есть возможность написать очень быструю
реализацию PSGI, которая загружает все модули и испольняет полностью
оптимизированный код как автономный prefork сервер с XS парсерами, или как
событийно-ориентированный легковесный веб сервер написанний на С и встроенном
perl, который поддерживает PSGI, или старый добрый основанный на CGI.pm скрипт,
который не загружает никаких модулей вобще и выполняется довольно быстро без
использования большого количества памяти в CGI окружении.

Есть реализация prefork веб серверов такие как L<Starman> и L<Starlet>, а также
полнофункциональные асинхронные событийно-ориентированные реализации такие как
L<Twiggy>, L<Corona> или L<Feersum>. Они довольно быстрые и имеют Plack
адаптеры, так что их можно запускать через утилиту L<plackup>.

Пользователи фреймворка могут выбрать какой сервер больше подходит под их нужды.
Разработчику веб фреймворка нет необходимости думать о разных пользователях с
разными запросами.

=head2 Plack

=head3 Что такое Plack? В чем отличие между PSGI и Plack?

PSGI это спецификация, поэтому нет программы или модуля называемого PSGI.
Конечным пользователям необходимо определиться с серверной реализацией PSGI, чтобы
запускать PSGI приложения. Plack это множество PSGI утилит, который также
включает PSGI сервер L<HTTP::Server::PSGI>, а также серверные
адаптеры под CGI, FastCGI или mod_perl.

Plack также имеет множество полезных API и вспомогательного кода над PSGI, как,
например L<Plack::Request> для обеспечения объектно-ориентированного API для
запросов, L<plackup>, что позволяет запускать PSGI приложения из командной
строки и конфигурировать их с помощью C<app.psgi> (аналог Rackup из Rack), и
L<Plack::Test> что позволяет тестировать приложения используя стандартную пару
L<HTTP::Request> и L<HTTP::Response> через mock или запущенный сервер. Смотрите
L<Plack>.

=head3 Какие серверы будут доступны?

В Plack поддерживается уже большинство серверов таких как Apache2, а также те,
которые поддерживают CGI или FastCGI, есть попытки поддерживать веб сервера,
который могут встраивать Perl, такие как Perlbal или nginx. Было бы хорошо, если
бы модуль Apache mod_perlite и Google AppEngine тоже поддерживали PSGI, чтобы
можно было запускать PSGI/Plack приложение в облаке.

=head3 Ruby это Rack, JavaScript это Jack. Почему это не называется Pack?

Да, Pack это действительно милое имя, но у Perl есть встроенная функция pack,
поэтому это может сбить с толку, особенно когда об этом рассказывают, а не
пишут.

=head3 Какой префикс стоит использовать реализовывая PSGI поддержку?

B<Не используйте PSGI:: префикс для реализаций PSGI серверов или адаптеров>.

PSGI префикс зарезервирован для PSGI спецификации и перечня юнит тестов, которые
должны проходиться разработчиками. Он не должен использоваться для конкретных
реализаций.

Если пишется плагин или расширение для поддержки PSGI для (воображаемого) веб
фреймворка С<Camper>, назовайте модуль C<Camper::Engine::PSGI>.

Если пишется веб сервер с поддержкой интерфейса PSGI, тогда можно назвать его
как угодно. Опционально можно поддерживать абстрактный интерфейс
L<Plack::Handler> или написать адаптер, например:

  my $server = Plack::Handler::FooBar->new(%opt);
  $server->run($app);

Поддерживая C<new> и C<run>, сервер становится совместимым с C<plackup>, и
пользователи смогут запускать приложения с помощью C<plackup>. Рекомендуется, но
не требуется, следовать этому API, правда придется реализовать собственный
модуль для запуска PSGI приложений.

=head3 I have a CGI or mod_perl application that I want to run on PSGI/Plack. What should I do?

You have several choices:

=over 4

=item CGI::PSGI

If you have a web application (or framework) that uses CGI.pm to handle
query parameters, L<CGI::PSGI> can help you migrate to PSGI.  You'll
need to change how you create CGI objects and how to return the response
headers and body, but the rest of your code will work unchanged.

=item CGI::Emulate::PSGI and CGI::Compile

If you have a dead old CGI script that you want to change as little as
possible (or even no change at all), then L<CGI::Emulate::PSGI> and
L<CGI::Compile> can compile and wrap them up as a PSGI application.

Compared to L<CGI::PSGI>, this might be less efficient because of
STDIN/STDOUT capturing and environment variable mangling, but should
work with any CGI implementation, not just CGI.pm, and L<CGI::Compile>
does the job of compiling a CGI script into a code reference just like
mod_perl's Registry does.

=item Plack::Request and Plack::Response

If you have an L<HTTP::Engine> based application (framework), or want to
write an app from scratch and need a better interface than L<CGI>, or
you're used to L<Apache::Request>, then L<Plack::Request> and
L<Plack::Response> might be what you want. It gives you a nice
Request/Response object API on top of the PSGI env hash and response
array.

=back

NOTE: Don't forget that whenever you have a CGI script that runs once
and exits, and you turn it into a persistent process, it may have
cleanup that needs to happen after every request -- variables that need
to be reset, files that need to be closed or deleted, etc.  PSGI can do
nothing about that (you have to fix it) except give you this friendly
reminder.

=head2 HTTP::Engine

=head3 Why PSGI/Plack instead of HTTP::Engine?

HTTP::Engine was a great experiment, but it mixed the application
interface (the C<request_handler> interface) with implementations, and
the monolithic class hierarchy and role based interfaces make it really
hard to write a new backend. We kept the existing HTTP::Engine and broke
it into three parts: The interface specification (PSGI), Reference
server implementations (Plack::Handler) and Standard APIs and Tools
(Plack).

=head3 Will HTTP::Engine be dead?

It won't be dead. HTTP::Engine will stay as it is and still be useful
if you want to write a micro webserver application rather than a
framework.

=head3 Do I have to rewrite my HTTP::Engine application to follow PSGI interface?

No, you don't need to rewrite your existing HTTP::Engine application.
It can be easily turned into a PSGI application using
L<HTTP::Engine::Interface::PSGI>.

Alternatively, you can use L<Plack::Request> and L<Plack::Response>
which gives compatible APIs to L<HTTP::Engine::Request> and
L<HTTP::Engine::Response>:

  use Plack::Request;
  use Plack::Response;

  sub request_handler {
      my $req = Plack::Request->new(shift);
      my $res = Plack::Response->new;
      # ...
      return $res->finalize;
  }

And this C<request_handler> is a PSGI application now.

=head2 API Design

Keep in mind that most design choices made in the PSGI spec are to
minimize the requirements on backends so they can optimize things.
Adding a fancy interface or allowing flexibility in the PSGI layers
might sound catchy to end users, but it would just add things that
backends have to support, which would end up getting in the way of
optimizations, or introducing more bugs. What makes a fancy API to
attract web application developers is your framework, not PSGI.

=head3 Why a big env hash instead of objects with APIs?

The simplicity of the interface is the key that made WSGI and Rack
successful. PSGI is a low-level interface between backends and web
application framework developers. If we define an API on what type of
objects should be passed and which method they need to implement,
there will be so much duplicated code in the backends, some of
which may be buggy.

For instance, PSGI defines C<< $env->{SERVER_NAME} >> as a
string. What if the PSGI spec required it to be an instance of Net::IP?
Backend code would have to depend on the Net::IP module, or have to
write a mock object that implements ALL of Net::IP's methods.
Backends depending on specific modules or having to reinvent lots
of stuff is considered harmful and that's why the interface is as minimal
as possible.

Making a nice API for the end users is a job that web application
frameworks (adapter developers) should do, not something PSGI needs to
define.

=head3 Why is the application a code ref rather than an object with a ->call method?

Requiring an object I<in addition to> a code ref would make EVERY
backend's code a few lines more tedious, while requiring an object
I<instead of> a code ref would make application developers write
another class and instanciate an object.

In other words, yes an object with a C<call> method could work, but
again PSGI was designed to be as simple as possible, and making a code
reference out of class/object is no brainer but the other way round
always requires a few lines of code and possibly a new file.

=head3 Why are the headers returned as an array ref and not a hash ref?

Short: In order to support multiple headers (e.g. C<Set-Cookie>).

Long: In Python WSGI, the response header is a list of (C<header_name>,
C<header_value>) I<tuples> i.e. C<type(response_headers) is ListType>
so there can be multiple entries for the same header key. In Rack and
JSGI, a header value is a String consisting of lines separated by
"C<\n>".

We liked Python's specification here, and since Perl hashes don't
allow multiple entries with the same key (unless it's C<tie>d), using
an array reference to store C<< [ key => value, key => value ] >> is
the simplest solution to keep both framework adapters and
backends simple. Other options, like allowing an array ref
in addition to a plain scalar, make either side of the code
unnecessarily tedious.

=head3 I want to send Unicode content in the HTTP response. How can I do so?

PSGI mocks wire protocols like CGI, and the interface doesn't care too
much about the character encodings and string semantics. That means,
all the data on PSGI environment values, content body etc. are sent as
byte strings, and it is an application's responsibility to properly
decode or encode characters such that it's being sent over HTTP.

If you have a decoded string in your application and want to send them
in C<UTF-8> as an HTTP body, you should use L<Encode> module to encode
it to utf-8. Note that if you use one of PSGI-supporting frameworks,
chances are that they allow you to set Unicode text in the response
body and they do the encoding for you. Check the documentation of your
framework to see if that's the case.

This design decision was made so it gives more flexibility to PSGI
applications and frameworks, without putting complicated work into
PSGI web servers and interface specification itself.

=head3 No iterators support in $body?

We learned that WSGI and Rack really enjoy the benefit of Python and
Ruby's language beauty, which are iterable objects in Python or
iterators in Ruby.

Rack, for instance, expects the body as an object that responds to
the C<each> method and then yields the buffer, so

  body.each { |buf| request.write(buf) }

would just magically work whether body is an Array, FileIO object or an
object that implements iterators. Perl doesn't have such a beautiful
thing in the language unless L<autobox> is loaded.  PSGI should not make
autobox as a requirement, so we only support a simple array ref or file
handle.

Writing an IO::Handle-like object is pretty easy since it's only
C<getline> and C<close>. You can also use PerlIO to write an object that
behaves like a filehandle, though it might be considered a little
unstable.

See also L<IO::Handle::Util> to turn anything iterators-like into
IO::Handle-like.

=head3 How should server determine to switch to sendfile(2) based serving?

First of all, an application SHOULD always set a IO::Handle-like
object (or an array of chunks) that responds to C<getline> and
C<close> as a body. That is guaranteed to work with any servers.

Optionally, if the server is written in perl or can tell a file
descriptor number to the C-land to serve the file, then the server MAY
check if the body is a real filehandle (possibly using
L<Plack::Util>'s C<is_real_fh> function), then get a file descriptor
with C<fileno> and call sendfile(2) or equivalent zero-copy data
transfer using that.

Otherwise, if the server can't send a file using the file descriptor
but needs a local file path (like mod_perl or nginx), the application
can return an IO::Handle-like object that also responds to C<path>
method. This type of IO-like object can easily be created using
L<IO::File::WithPath>, L<IO::Handle::Util> or L<Plack::Util>'s
C<set_io_path> function.

Middlewares can also look to see if the body has C<path> method and
does something interesting with it, like setting C<X-Sendfile>
headers.

To summarize:

=over 4

=item *

When to serve static files, applications should always return a real
filehandle or IO::Handle object. That should work everywhere, and can
be optimized in some environments.

=item *

Applications can also set IO::Handle like object with an additional
C<path> method, then it should work everywhere again, and can be
optimized in even more environments.

=back

=head3 What if I want to stream content or do a long-poll Comet?

The most straightforward way to implement server push is for your
application to return a IO::Handle-like object as a content body that
implements C<getline> to return pushed content. This is guaranteed to
work everywhere, but it's more like I<pull> than I<push>, and it's
hard to do non-blocking I/O unless you use Coro.

If you want to do server push, where your application runs in an event
loop and push content body to the client as it's ready, you should
return a callback to delay the response.

  # long-poll comet like a chat application
  my $app = sub {
      my $env = shift;
      unless ($env->{'psgi.streaming'}) {
          die "This application needs psgi.streaming support";
      }
      return sub {
          my $respond = shift;
          wait_for_new_message(sub {
              my $message = shift;
              my $body = [ $message->to_json ];
              $respond->([200, ['Content-Type', 'application/json'], $body]);
          });
      };
  };

C<wait_for_new_message> can be blocking or non-blocking: it's up to
you. Most of the case you want to run it non-blockingly and should use
event loops like L<AnyEvent>. You may also check C<psgi.nonblocking>
value to see that it's possible and fallback to a blocking call
otherwise.

Also, to stream the content body (like streaming messages over the
Flash socket or multipart XMLHTTPRequest):

  my $app = sub {
      my $env = shift;
      unless ($env->{'psgi.streaming'}) {
          die "This application needs psgi.streaming support";
      }
      return sub {
          my $respond = shift;
          my $writer = $respond->([200, ['Content-Type', 'text/plain']]);
          wait_for_new_message(sub {
              my $message = shift;
              if ($message) {
                  $writer->write($message->to_json);
              } else {
                  $writer->close;
              }
          });
      };
  };

=head3 Which framework should I use to do streaming though?

We have servers that support non-blocking (where C<psgi.nonblocking>
is set to true), but the problem is that framework side doesn't
necessarily support asynchronous event loop. For instance Catalyst has
C<write> method on the response object:

  while ($cond) {
      $c->res->write($some_stuff);
  }

This should work with all servers with C<psgi.streaming> support even
if they are blocking, and it should be fine if they're running in
multiple processes (C<psgi.multiprocess> is true).

L<Catalyst::Engine::PSGI> also supports setting an IO::Handle-like
object that supports C<getline>, so using L<IO::Handle::Util>

  my $io = io_from_getline sub {
       return $data; # or undef when done()
  };
  $c->res->body($io);

And that works fine to do streaming, but it's blocking (I<pull>)
rather than asynchronous server push, so again you should be careful
not to run this application on non-blocking (and non-multiprocess)
server environments.

We expect that more web frameworks will appear that is focused on, or
existent frameworks will add support for, asynchronous and
non-blocking streaming interface.

=head3 Is psgi.streaming interface a requirement for the servers?

It is specified as B<SHOULD>, so unless there is a strong reason not
to implement the interface, all servers are encouraged to implement
this interface.

However, if you implement a PSGI server using an Perl XS interface for
the ultimate performance or integration with web servers like Apache
or nginx, or implement a sandbox like environment (like Google
AppEngine or Heroku) or distributed platform using tools like Gearman,
you might not want to implement this interface.

That's fine, and in that case applications relying on the streaming
interface can still use L<Plack::Middleware::BufferedStreaming> to
fallback to the buffered write on unsupported servers.

=head3 Why CGI-style environment variables instead of HTTP headers as a hash?

Most existing web application frameworks already have code or a handler
to run under the CGI environment. Using CGI-style hash keys instead of
HTTP headers makes it trivial for the framework developers to implement
an adapter to support PSGI. For instance, L<Catalyst::Engine::PSGI> is
only a few dozens lines different from L<Catalyst::Engine::CGI> and was
written in less than an hour.

=head3 Why is PATH_INFO URI decoded?

To be compatible with CGI spec (RFC 3875) and most web servers'
implementations (like Apache and lighttpd).

I understand it could be inconvenient that you can't distinguish
C<foo%2fbar> from C<foo/bar> in the trailing path, but the CGI spec
clearly says C<PATH_INFO> should be decoded by servers, and that web
servers can deny such requests containing C<%2f> (since such requests
would lose information in PATH_INFO). Leaving those reserved characters
undecoded (partial decoding) would make things worse, since then you
can't tell C<foo%2fbar> from C<foo%252fbar> and could be a security hole
with double encoding or decoding.

For web application frameworks that need more control over the actual
raw URI (such as L<Catalyst>), we made the C<REQUEST_URI> environment
hash key REQUIRED. The servers should set the undecoded (unparsed)
original URI (containing the query string) to this key. Note that
C<REQUEST_URI> is completely raw even if the encoded entities are
URI-safe.

For comparison, WSGI (PEP-333) defines both C<SCRIPT_NAME> and
C<PATH_INFO> be decoded and Rack leaves it implementation dependent,
while I<fixing> most of PATH_INFO left encoded in Ruby web server
implementations.

L<http://www.python.org/dev/peps/pep-0333/#url-reconstruction>
L<http://groups.google.com/group/rack-devel/browse_thread/thread/ddf4622e69bea53f>

=head1 SEE ALSO

WSGI's FAQ clearly answers lots of questions about how some API design
decisions were made, some of which can directly apply to PSGI.

L<http://www.python.org/dev/peps/pep-0333/#questions-and-answers>

=head1 MORE QUESTIONS?

If you have a question that is not answered here, or things you totally
disagree with, come join the IRC channel #plack on irc.perl.org or
mailing list L<http://groups.google.com/group/psgi-plack>. Be sure you
clarify which hat you're wearing: application developers, server
implementors or middleware developers. And don't criticize the spec just
to criticize it: show your exact code that doesn't work or get too messy
because of spec restrictions etc. We'll ignore all nitpicks and bikeshed
discussion.

=head1 AUTHOR

Tatsuhiko Miyagawa E<lt>miyagawa@bulknews.netE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright Tatsuhiko Miyagawa, 2009-2010.

This document is licensed under the Creative Commons license by-sa.

=cut
